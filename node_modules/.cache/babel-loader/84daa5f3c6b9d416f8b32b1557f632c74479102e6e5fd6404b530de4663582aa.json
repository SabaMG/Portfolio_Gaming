{"ast":null,"code":"var _jsxFileName = \"/Users/saba/portfolio/src/ThreeScene.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { gsap } from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  const cameraRef = useRef(null);\n  const raycaster = useRef(new THREE.Raycaster());\n  const mouse = useRef(new THREE.Vector2());\n  useEffect(() => {\n    var _mountRef$current;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x111111);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(-5, 5, 10);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.appendChild(renderer.domElement);\n\n    // Main Building (for reference)\n    const mainBuildingGeometry = new THREE.BoxGeometry(4, 4, 4);\n    const mainBuildingMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8b4513\n    });\n    const mainBuilding = new THREE.Mesh(mainBuildingGeometry, mainBuildingMaterial);\n    mainBuilding.position.y = 2;\n    scene.add(mainBuilding);\n\n    // Ground setup (omitted for brevity)\n\n    // Lighting setup (omitted for brevity)\n\n    // Panel and Buttons\n    const panelGeometry = new THREE.PlaneGeometry(2, 2);\n    const panelMaterial = new THREE.MeshBasicMaterial({\n      color: 0x333333,\n      side: THREE.DoubleSide\n    });\n    const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n    panel.position.set(-5, 3, 0);\n    scene.add(panel);\n\n    // Function to create a colorful button with outline and text\n    function createStyledButton(text, color, outlineColor, font) {\n      const buttonGroup = new THREE.Group();\n\n      // Button background\n      const buttonGeometry = new THREE.BoxGeometry(1.5, 0.5, 0.1);\n      const buttonMaterial = new THREE.MeshBasicMaterial({\n        color\n      });\n      const button = new THREE.Mesh(buttonGeometry, buttonMaterial);\n\n      // Outline (dark border)\n      const outlineGeometry = new THREE.BoxGeometry(1.55, 0.55, 0.1);\n      const outlineMaterial = new THREE.MeshBasicMaterial({\n        color: outlineColor\n      });\n      const outline = new THREE.Mesh(outlineGeometry, outlineMaterial);\n      outline.position.z = -0.01;\n\n      // Text\n      const textGeometry = new TextGeometry(text, {\n        font: font,\n        size: 0.15,\n        height: 0.02\n      });\n      const textMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      const buttonText = new THREE.Mesh(textGeometry, textMaterial);\n      buttonText.position.set(-0.6, -0.1, 0.06);\n      buttonGroup.add(outline);\n      buttonGroup.add(button);\n      buttonGroup.add(buttonText);\n      return buttonGroup;\n    }\n\n    // Define camera positions for each button\n    const cameraPositions = [{\n      x: 10,\n      y: 5,\n      z: 10\n    }, {\n      x: -10,\n      y: 5,\n      z: -10\n    }, {\n      x: 0,\n      y: 10,\n      z: 10\n    }, {\n      x: 0,\n      y: 5,\n      z: -15\n    }];\n\n    // Load Font and Add Styled Buttons to Panel\n    const fontLoader = new FontLoader();\n    let buttons = []; // Store button groups for click detection\n\n    fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', font => {\n      // Define panel button configurations\n      const buttonConfigs = [{\n        text: \"Projects\",\n        color: 0xff0055,\n        outline: 0x000000\n      }, {\n        text: \"Articles\",\n        color: 0xffaa00,\n        outline: 0x000000\n      }, {\n        text: \"About Me\",\n        color: 0x00aaff,\n        outline: 0x000000\n      }, {\n        text: \"Credits\",\n        color: 0xffcc33,\n        outline: 0x000000\n      }];\n\n      // Create and position each button on the panel\n      buttonConfigs.forEach((btn, index) => {\n        const button = createStyledButton(btn.text, btn.color, btn.outline, font);\n        button.position.set(0, index * -0.7, 0.05);\n        panel.add(button);\n        buttons.push(button); // Add to buttons array for click detection\n      });\n    });\n\n    // Function to change camera angle smoothly\n    const changeCameraAngle = index => {\n      if (cameraRef.current) {\n        const pos = cameraPositions[index];\n        gsap.to(cameraRef.current.position, {\n          x: pos.x,\n          y: pos.y,\n          z: pos.z,\n          duration: 2,\n          onUpdate: () => {\n            var _cameraRef$current;\n            (_cameraRef$current = cameraRef.current) === null || _cameraRef$current === void 0 ? void 0 : _cameraRef$current.lookAt(0, 0, 0);\n          }\n        });\n      }\n    };\n\n    // Detect Mouse Clicks on Buttons\n    const onMouseClick = event => {\n      if (!mountRef.current) return;\n\n      // Convert mouse position to normalized device coordinates\n      mouse.current.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.current.setFromCamera(mouse.current, cameraRef.current);\n      const intersects = raycaster.current.intersectObjects(buttons, true);\n      if (intersects.length > 0) {\n        const clickedButtonIndex = buttons.findIndex(btn => btn === intersects[0].object.parent);\n        if (clickedButtonIndex !== -1) {\n          changeCameraAngle(clickedButtonIndex);\n        }\n      }\n    };\n    window.addEventListener('click', onMouseClick);\n\n    // Orbit Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.maxPolarAngle = Math.PI / 2.2;\n    controls.minDistance = 5;\n    controls.maxDistance = 50;\n\n    // Animation loop\n    function animate() {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Cleanup on unmount\n    return () => {\n      var _mountRef$current2;\n      renderer.dispose();\n      (_mountRef$current2 = mountRef.current) === null || _mountRef$current2 === void 0 ? void 0 : _mountRef$current2.removeChild(renderer.domElement);\n      window.removeEventListener('click', onMouseClick);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 12\n  }, this);\n};\n_s(ThreeScene, \"GGMp3eX8uvqaj2YO3O7DFm0wjkk=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","FontLoader","TextGeometry","gsap","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","cameraRef","raycaster","Raycaster","mouse","Vector2","_mountRef$current","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","current","renderer","WebGLRenderer","setSize","appendChild","domElement","mainBuildingGeometry","BoxGeometry","mainBuildingMaterial","MeshStandardMaterial","color","mainBuilding","Mesh","y","add","panelGeometry","PlaneGeometry","panelMaterial","MeshBasicMaterial","side","DoubleSide","panel","createStyledButton","text","outlineColor","font","buttonGroup","Group","buttonGeometry","buttonMaterial","button","outlineGeometry","outlineMaterial","outline","z","textGeometry","size","height","textMaterial","buttonText","cameraPositions","x","fontLoader","buttons","load","buttonConfigs","forEach","btn","index","push","changeCameraAngle","pos","to","duration","onUpdate","_cameraRef$current","lookAt","onMouseClick","event","clientX","clientY","setFromCamera","intersects","intersectObjects","length","clickedButtonIndex","findIndex","object","parent","addEventListener","controls","enableDamping","dampingFactor","maxPolarAngle","Math","PI","minDistance","maxDistance","animate","requestAnimationFrame","update","render","_mountRef$current2","dispose","removeChild","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/saba/portfolio/src/ThreeScene.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { Reflector } from 'three/examples/jsm/objects/Reflector';\nimport { gsap } from 'gsap';\n\nconst ThreeScene: React.FC = () => {\n    const mountRef = useRef<HTMLDivElement>(null);\n    const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n    const raycaster = useRef(new THREE.Raycaster());\n    const mouse = useRef(new THREE.Vector2());\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(0x111111);\n\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        camera.position.set(-5, 5, 10);\n        cameraRef.current = camera;\n\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current?.appendChild(renderer.domElement);\n\n        // Main Building (for reference)\n        const mainBuildingGeometry = new THREE.BoxGeometry(4, 4, 4);\n        const mainBuildingMaterial = new THREE.MeshStandardMaterial({ color: 0x8b4513 });\n        const mainBuilding = new THREE.Mesh(mainBuildingGeometry, mainBuildingMaterial);\n        mainBuilding.position.y = 2;\n        scene.add(mainBuilding);\n\n        // Ground setup (omitted for brevity)\n\n        // Lighting setup (omitted for brevity)\n\n        // Panel and Buttons\n        const panelGeometry = new THREE.PlaneGeometry(2, 2);\n        const panelMaterial = new THREE.MeshBasicMaterial({ color: 0x333333, side: THREE.DoubleSide });\n        const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n        panel.position.set(-5, 3, 0);\n        scene.add(panel);\n\n        // Function to create a colorful button with outline and text\n        function createStyledButton(text: string, color: number, outlineColor: number, font: THREE.Font) {\n            const buttonGroup = new THREE.Group();\n\n            // Button background\n            const buttonGeometry = new THREE.BoxGeometry(1.5, 0.5, 0.1);\n            const buttonMaterial = new THREE.MeshBasicMaterial({ color });\n            const button = new THREE.Mesh(buttonGeometry, buttonMaterial);\n\n            // Outline (dark border)\n            const outlineGeometry = new THREE.BoxGeometry(1.55, 0.55, 0.1);\n            const outlineMaterial = new THREE.MeshBasicMaterial({ color: outlineColor });\n            const outline = new THREE.Mesh(outlineGeometry, outlineMaterial);\n            outline.position.z = -0.01;\n\n            // Text\n            const textGeometry = new TextGeometry(text, {\n                font: font,\n                size: 0.15,\n                height: 0.02,\n            });\n            const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n            const buttonText = new THREE.Mesh(textGeometry, textMaterial);\n            buttonText.position.set(-0.6, -0.1, 0.06);\n\n            buttonGroup.add(outline);\n            buttonGroup.add(button);\n            buttonGroup.add(buttonText);\n\n            return buttonGroup;\n        }\n\n        // Define camera positions for each button\n        const cameraPositions = [\n            { x: 10, y: 5, z: 10 },\n            { x: -10, y: 5, z: -10 },\n            { x: 0, y: 10, z: 10 },\n            { x: 0, y: 5, z: -15 },\n        ];\n\n        // Load Font and Add Styled Buttons to Panel\n        const fontLoader = new FontLoader();\n        let buttons: THREE.Group[] = []; // Store button groups for click detection\n\n        fontLoader.load(\n            'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',\n            (font) => {\n                // Define panel button configurations\n                const buttonConfigs = [\n                    { text: \"Projects\", color: 0xff0055, outline: 0x000000 },\n                    { text: \"Articles\", color: 0xffaa00, outline: 0x000000 },\n                    { text: \"About Me\", color: 0x00aaff, outline: 0x000000 },\n                    { text: \"Credits\", color: 0xffcc33, outline: 0x000000 },\n                ];\n\n                // Create and position each button on the panel\n                buttonConfigs.forEach((btn, index) => {\n                    const button = createStyledButton(btn.text, btn.color, btn.outline, font);\n                    button.position.set(0, index * -0.7, 0.05);\n                    panel.add(button);\n                    buttons.push(button); // Add to buttons array for click detection\n                });\n            }\n        );\n\n        // Function to change camera angle smoothly\n        const changeCameraAngle = (index: number) => {\n            if (cameraRef.current) {\n                const pos = cameraPositions[index];\n                gsap.to(cameraRef.current.position, {\n                    x: pos.x,\n                    y: pos.y,\n                    z: pos.z,\n                    duration: 2,\n                    onUpdate: () => {\n                        cameraRef.current?.lookAt(0, 0, 0);\n                    },\n                });\n            }\n        };\n\n        // Detect Mouse Clicks on Buttons\n        const onMouseClick = (event: MouseEvent) => {\n            if (!mountRef.current) return;\n\n            // Convert mouse position to normalized device coordinates\n            mouse.current.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n            raycaster.current.setFromCamera(mouse.current, cameraRef.current!);\n            const intersects = raycaster.current.intersectObjects(buttons, true);\n\n            if (intersects.length > 0) {\n                const clickedButtonIndex = buttons.findIndex((btn) => btn === intersects[0].object.parent);\n                if (clickedButtonIndex !== -1) {\n                    changeCameraAngle(clickedButtonIndex);\n                }\n            }\n        };\n\n        window.addEventListener('click', onMouseClick);\n\n        // Orbit Controls\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.25;\n        controls.maxPolarAngle = Math.PI / 2.2;\n        controls.minDistance = 5;\n        controls.maxDistance = 50;\n\n        // Animation loop\n        function animate() {\n            requestAnimationFrame(animate);\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        animate();\n\n        // Cleanup on unmount\n        return () => {\n            renderer.dispose();\n            mountRef.current?.removeChild(renderer.domElement);\n            window.removeEventListener('click', onMouseClick);\n        };\n    }, []);\n\n    return <div ref={mountRef} />;\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}