{"ast":null,"code":"var _jsxFileName = \"/Users/saba/portfolio/src/ThreeScene.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { gsap } from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  const cameraRef = useRef(null);\n  const raycaster = useRef(new THREE.Raycaster());\n  const mouse = useRef(new THREE.Vector2());\n  useEffect(() => {\n    var _mountRef$current;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xffffff);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(10, 5, 10);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.appendChild(renderer.domElement);\n\n    // Main Building\n    const mainBuildingGeometry = new THREE.BoxGeometry(4, 4, 4);\n    const mainBuildingMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8b4513\n    });\n    const mainBuilding = new THREE.Mesh(mainBuildingGeometry, mainBuildingMaterial);\n    mainBuilding.position.y = 2;\n    scene.add(mainBuilding);\n\n    // Roof\n    const roofGeometry = new THREE.ConeGeometry(3.5, 2, 4);\n    const roofMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8b0000\n    });\n    const roof = new THREE.Mesh(roofGeometry, roofMaterial);\n    roof.position.y = 5;\n    roof.rotation.y = Math.PI / 4;\n    scene.add(roof);\n\n    // Ground\n    const groundGeometry = new THREE.PlaneGeometry(50, 50);\n    const groundMaterial = new THREE.MeshStandardMaterial({\n      color: 0x228b22\n    });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = 0;\n    ground.receiveShadow = true;\n    scene.add(ground);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    pointLight.position.set(10, 10, 10);\n    scene.add(pointLight);\n\n    // 3D Panel for Camera Control\n    const panelGeometry = new THREE.PlaneGeometry(2, 2);\n    const panelMaterial = new THREE.MeshBasicMaterial({\n      color: 0x333333,\n      side: THREE.DoubleSide\n    });\n    const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n    panel.position.set(-5, 3, 0); // Position it to the left of the house\n    scene.add(panel);\n\n    // Buttons on the Panel\n    const buttonGeometry = new THREE.BoxGeometry(0.5, 0.25, 0.1);\n    const buttonMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffffff\n    });\n    const button1 = new THREE.Mesh(buttonGeometry, buttonMaterial);\n    button1.position.set(-0.5, 0.5, 0.1); // Position button on panel\n    panel.add(button1);\n    const button2 = new THREE.Mesh(buttonGeometry, buttonMaterial);\n    button2.position.set(0.5, 0.5, 0.1);\n    panel.add(button2);\n\n    // Array of camera positions for smooth transition\n    const cameraPositions = [{\n      x: 10,\n      y: 5,\n      z: 10\n    }, {\n      x: 0,\n      y: 10,\n      z: 10\n    }, {\n      x: -10,\n      y: 5,\n      z: -10\n    }];\n    let positionIndex = 0;\n\n    // Function to change camera angle\n    const changeCameraAngle = index => {\n      if (cameraRef.current) {\n        const pos = cameraPositions[index];\n        gsap.to(cameraRef.current.position, {\n          x: pos.x,\n          y: pos.y,\n          z: pos.z,\n          duration: 2,\n          onUpdate: () => {\n            var _cameraRef$current;\n            (_cameraRef$current = cameraRef.current) === null || _cameraRef$current === void 0 ? void 0 : _cameraRef$current.lookAt(0, 0, 0);\n          }\n        });\n      }\n    };\n\n    // Detect Mouse Clicks on Panel Buttons\n    const onMouseClick = event => {\n      if (!mountRef.current) return;\n      mouse.current.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.current.setFromCamera(mouse.current, cameraRef.current);\n      const intersects = raycaster.current.intersectObjects([button1, button2]);\n      if (intersects.length > 0) {\n        const clickedObject = intersects[0].object;\n        if (clickedObject === button1) {\n          changeCameraAngle(0);\n        } else if (clickedObject === button2) {\n          changeCameraAngle(1);\n        }\n      }\n    };\n    window.addEventListener('click', onMouseClick);\n\n    // Orbit Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.maxPolarAngle = Math.PI / 2.2;\n    controls.minDistance = 5;\n    controls.maxDistance = 50;\n\n    // Animation loop\n    function animate() {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Cleanup on unmount\n    return () => {\n      var _mountRef$current2;\n      renderer.dispose();\n      (_mountRef$current2 = mountRef.current) === null || _mountRef$current2 === void 0 ? void 0 : _mountRef$current2.removeChild(renderer.domElement);\n      window.removeEventListener('click', onMouseClick);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 12\n  }, this);\n};\n_s(ThreeScene, \"GGMp3eX8uvqaj2YO3O7DFm0wjkk=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","gsap","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","cameraRef","raycaster","Raycaster","mouse","Vector2","_mountRef$current","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","current","renderer","WebGLRenderer","setSize","appendChild","domElement","mainBuildingGeometry","BoxGeometry","mainBuildingMaterial","MeshStandardMaterial","color","mainBuilding","Mesh","y","add","roofGeometry","ConeGeometry","roofMaterial","roof","rotation","Math","PI","groundGeometry","PlaneGeometry","groundMaterial","ground","x","receiveShadow","ambientLight","AmbientLight","pointLight","PointLight","panelGeometry","panelMaterial","MeshBasicMaterial","side","DoubleSide","panel","buttonGeometry","buttonMaterial","button1","button2","cameraPositions","z","positionIndex","changeCameraAngle","index","pos","to","duration","onUpdate","_cameraRef$current","lookAt","onMouseClick","event","clientX","clientY","setFromCamera","intersects","intersectObjects","length","clickedObject","object","addEventListener","controls","enableDamping","dampingFactor","maxPolarAngle","minDistance","maxDistance","animate","requestAnimationFrame","update","render","_mountRef$current2","dispose","removeChild","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/saba/portfolio/src/ThreeScene.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { gsap } from 'gsap';\n\nconst ThreeScene: React.FC = () => {\n    const mountRef = useRef<HTMLDivElement>(null);\n    const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n    const raycaster = useRef(new THREE.Raycaster());\n    const mouse = useRef(new THREE.Vector2());\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(0xffffff);\n\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        camera.position.set(10, 5, 10);\n        cameraRef.current = camera;\n\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current?.appendChild(renderer.domElement);\n\n        // Main Building\n        const mainBuildingGeometry = new THREE.BoxGeometry(4, 4, 4);\n        const mainBuildingMaterial = new THREE.MeshStandardMaterial({ color: 0x8b4513 });\n        const mainBuilding = new THREE.Mesh(mainBuildingGeometry, mainBuildingMaterial);\n        mainBuilding.position.y = 2;\n        scene.add(mainBuilding);\n\n        // Roof\n        const roofGeometry = new THREE.ConeGeometry(3.5, 2, 4);\n        const roofMaterial = new THREE.MeshStandardMaterial({ color: 0x8b0000 });\n        const roof = new THREE.Mesh(roofGeometry, roofMaterial);\n        roof.position.y = 5;\n        roof.rotation.y = Math.PI / 4;\n        scene.add(roof);\n\n        // Ground\n        const groundGeometry = new THREE.PlaneGeometry(50, 50);\n        const groundMaterial = new THREE.MeshStandardMaterial({ color: 0x228b22 });\n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -Math.PI / 2;\n        ground.position.y = 0;\n        ground.receiveShadow = true;\n        scene.add(ground);\n\n        // Lighting\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        scene.add(ambientLight);\n\n        const pointLight = new THREE.PointLight(0xffffff, 1);\n        pointLight.position.set(10, 10, 10);\n        scene.add(pointLight);\n\n        // 3D Panel for Camera Control\n        const panelGeometry = new THREE.PlaneGeometry(2, 2);\n        const panelMaterial = new THREE.MeshBasicMaterial({ color: 0x333333, side: THREE.DoubleSide });\n        const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n        panel.position.set(-5, 3, 0); // Position it to the left of the house\n        scene.add(panel);\n\n        // Buttons on the Panel\n        const buttonGeometry = new THREE.BoxGeometry(0.5, 0.25, 0.1);\n        const buttonMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        const button1 = new THREE.Mesh(buttonGeometry, buttonMaterial);\n        button1.position.set(-0.5, 0.5, 0.1); // Position button on panel\n        panel.add(button1);\n\n        const button2 = new THREE.Mesh(buttonGeometry, buttonMaterial);\n        button2.position.set(0.5, 0.5, 0.1);\n        panel.add(button2);\n\n        // Array of camera positions for smooth transition\n        const cameraPositions = [\n            { x: 10, y: 5, z: 10 },\n            { x: 0, y: 10, z: 10 },\n            { x: -10, y: 5, z: -10 },\n        ];\n        let positionIndex = 0;\n\n        // Function to change camera angle\n        const changeCameraAngle = (index: number) => {\n            if (cameraRef.current) {\n                const pos = cameraPositions[index];\n                gsap.to(cameraRef.current.position, {\n                    x: pos.x,\n                    y: pos.y,\n                    z: pos.z,\n                    duration: 2,\n                    onUpdate: () => {\n                        cameraRef.current?.lookAt(0, 0, 0);\n                    }\n                });\n            }\n        };\n\n        // Detect Mouse Clicks on Panel Buttons\n        const onMouseClick = (event: MouseEvent) => {\n            if (!mountRef.current) return;\n\n            mouse.current.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n            \n            raycaster.current.setFromCamera(mouse.current, cameraRef.current!);\n            const intersects = raycaster.current.intersectObjects([button1, button2]);\n\n            if (intersects.length > 0) {\n                const clickedObject = intersects[0].object;\n\n                if (clickedObject === button1) {\n                    changeCameraAngle(0);\n                } else if (clickedObject === button2) {\n                    changeCameraAngle(1);\n                }\n            }\n        };\n\n        window.addEventListener('click', onMouseClick);\n\n        // Orbit Controls\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.25;\n        controls.maxPolarAngle = Math.PI / 2.2;\n        controls.minDistance = 5;\n        controls.maxDistance = 50;\n\n        // Animation loop\n        function animate() {\n            requestAnimationFrame(animate);\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        animate();\n\n        // Cleanup on unmount\n        return () => {\n            renderer.dispose();\n            mountRef.current?.removeChild(renderer.domElement);\n            window.removeEventListener('click', onMouseClick);\n        };\n    }, []);\n\n    return <div ref={mountRef} />;\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}