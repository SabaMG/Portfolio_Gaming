{"ast":null,"code":"var _jsxFileName = \"/Users/saba/portfolio/src/ThreeScene.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { Reflector } from 'three/examples/jsm/objects/Reflector';\nimport { gsap } from 'gsap';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  const cameraRef = useRef(null);\n  const raycaster = useRef(new THREE.Raycaster());\n  const mouse = useRef(new THREE.Vector2());\n  useEffect(() => {\n    var _mountRef$current;\n    const scene = new THREE.Scene();\n    // Create a GLTFLoader instance\n    const loader = new GLTFLoader();\n\n    // Load the GLB model\n    loader.load('/models/Gaming Room PSD Pro.glb',\n    // Path to the model file\n    gltf => {\n      const model = gltf.scene;\n      model.position.set(0, -0.16, 0); // Adjust position as needed\n      scene.add(model);\n    }, undefined, error => {\n      console.error('An error occurred while loading the model', error);\n    });\n    scene.background = new THREE.Color(0x111111);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(-5, 5, 10);\n    cameraRef.current = camera;\n    // Disable right-click context menu\n    window.addEventListener('contextmenu', event => event.preventDefault());\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.appendChild(renderer.domElement);\n\n    // Ground with fading, glossy reflection\n    const groundGeometry = new THREE.PlaneGeometry(500, 500);\n\n    // Create the Reflector\n    const groundMirror = new Reflector(groundGeometry, {\n      color: 0x888888,\n      // Base gray color for the reflection\n      textureWidth: window.innerWidth * 2,\n      textureHeight: window.innerHeight * 2,\n      clipBias: 0.003\n    });\n    groundMirror.rotation.x = -Math.PI / 2;\n    groundMirror.position.y = 0.01; // Slightly above ground\n    scene.add(groundMirror);\n\n    // Create a gradient overlay to fade the reflection\n    function createGradientTexture() {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = 256;\n      canvas.height = 512;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        throw new Error(\"Failed to get 2D context\");\n      }\n      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n      gradient.addColorStop(0, \"rgba(0, 0, 0, 1)\"); // Black at the top\n      gradient.addColorStop(1, \"rgba(0, 0, 0, 0)\"); // Transparent at the bottom\n\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Convert the canvas to a texture\n      const texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n      return texture;\n    }\n    const gradientTexture = createGradientTexture();\n    gradientTexture.wrapS = THREE.ClampToEdgeWrapping;\n    gradientTexture.wrapT = THREE.ClampToEdgeWrapping;\n    const groundOverlayMaterial = new THREE.MeshBasicMaterial({\n      map: gradientTexture,\n      transparent: true,\n      opacity: 0.5 // Adjust opacity for subtlety\n    });\n    const groundOverlay = new THREE.Mesh(groundGeometry, groundOverlayMaterial);\n    groundOverlay.rotation.x = -Math.PI / 2;\n    groundOverlay.position.y = 0.015; // Slightly above the mirror for blending\n    scene.add(groundOverlay);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.2); // Reduced intensity to 0.2\n    scene.add(ambientLight);\n    const pointLight = new THREE.PointLight(0xffffff, 0.6); // Reduced intensity to 0.6\n    pointLight.position.set(10, 10, 10);\n    scene.add(pointLight);\n\n    // Panel and Buttons\n    const panelGeometry = new THREE.PlaneGeometry(2, 3);\n    const panelMaterial = new THREE.MeshBasicMaterial({\n      color: 0x333333,\n      side: THREE.DoubleSide\n    });\n    const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n    panel.position.set(-5, 3, 0);\n    scene.add(panel);\n\n    // Function to create a colorful button with outline and text\n    function createStyledButton(text, color, outlineColor, font) {\n      const buttonGroup = new THREE.Group();\n\n      // Button background\n      const buttonGeometry = new THREE.BoxGeometry(1.5, 0.5, 0.1);\n      const buttonMaterial = new THREE.MeshBasicMaterial({\n        color\n      });\n      const button = new THREE.Mesh(buttonGeometry, buttonMaterial);\n\n      // Outline (dark border)\n      const outlineGeometry = new THREE.BoxGeometry(1.55, 0.55, 0.1);\n      const outlineMaterial = new THREE.MeshBasicMaterial({\n        color: outlineColor\n      });\n      const outline = new THREE.Mesh(outlineGeometry, outlineMaterial);\n      outline.position.z = -0.01;\n\n      // Text\n      const textGeometry = new TextGeometry(text, {\n        font: font,\n        size: 0.15,\n        height: 0.02\n      });\n      const textMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      const buttonText = new THREE.Mesh(textGeometry, textMaterial);\n      buttonText.position.set(-0.6, -0.1, 0.06);\n      buttonGroup.add(outline);\n      buttonGroup.add(button);\n      buttonGroup.add(buttonText);\n      return buttonGroup;\n    }\n\n    // Define camera positions for each button\n    const cameraPositions = [{\n      x: 0,\n      y: 0,\n      z: 50\n    }, {\n      x: -10,\n      y: 5,\n      z: -10\n    }, {\n      x: 0,\n      y: 5,\n      z: 1\n    }, {\n      x: 0,\n      y: 5,\n      z: -15\n    }];\n\n    // Load Font and Add Styled Buttons to Panel\n    const fontLoader = new FontLoader();\n    let buttons = []; // Store button groups for click detection\n\n    fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', font => {\n      // Define panel button configurations\n      const buttonConfigs = [{\n        text: \"Projects\",\n        color: 0xff0055,\n        outline: 0x000000\n      }, {\n        text: \"Articles\",\n        color: 0xffaa00,\n        outline: 0x000000\n      }, {\n        text: \"About Me\",\n        color: 0x00aaff,\n        outline: 0x000000\n      }, {\n        text: \"Credits\",\n        color: 0xffcc33,\n        outline: 0x000000\n      }];\n\n      // Create and position each button on the panel\n      buttonConfigs.forEach((btn, index) => {\n        const button = createStyledButton(btn.text, btn.color, btn.outline, font);\n        button.position.set(0, (index - 1.5) * -0.7, 0.05);\n        panel.add(button);\n        buttons.push(button); // Add to buttons array for click detection\n      });\n    });\n\n    // Function to change camera angle smoothly\n    const changeCameraAngle = index => {\n      if (cameraRef.current) {\n        const pos = cameraPositions[index];\n        gsap.to(cameraRef.current.position, {\n          x: pos.x,\n          y: pos.y,\n          z: pos.z,\n          duration: 2,\n          onUpdate: () => {\n            var _cameraRef$current;\n            (_cameraRef$current = cameraRef.current) === null || _cameraRef$current === void 0 ? void 0 : _cameraRef$current.lookAt(0, 2, 0);\n          }\n        });\n      }\n    };\n\n    // Detect Mouse Clicks on Buttons\n    const onMouseClick = event => {\n      if (!mountRef.current) return;\n\n      // Convert mouse position to normalized device coordinates\n      mouse.current.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.current.setFromCamera(mouse.current, cameraRef.current);\n      const intersects = raycaster.current.intersectObjects(buttons, true);\n      if (intersects.length > 0) {\n        const clickedButtonIndex = buttons.findIndex(btn => btn === intersects[0].object.parent);\n        if (clickedButtonIndex !== -1) {\n          changeCameraAngle(clickedButtonIndex);\n        }\n      }\n    };\n    window.addEventListener('click', onMouseClick);\n\n    // Orbit Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    // Enable only rotation (orbit) around the target\n    controls.enablePan = false; // Disable panning, so the camera position cannot change\n\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.maxPolarAngle = Math.PI / 2.2; // Prevents camera from going below the ground\n    controls.minPolarAngle = 0; // Prevents camera from looking straight up\n    // Optional horizontal rotation limits\n    controls.minAzimuthAngle = -Math.PI / 2; // Left boundary\n    controls.maxAzimuthAngle = Math.PI / 10; // Right boundary\n    controls.minDistance = 5;\n    controls.maxDistance = 50;\n\n    // Animation loop\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Update controls\n      controls.update();\n\n      // Constrain camera position within bounds\n      const maxX = 10,\n        minX = -10;\n      const maxY = 10,\n        minY = 1;\n      const maxZ = 10,\n        minZ = -10;\n      camera.position.x = Math.max(minX, Math.min(maxX, camera.position.x));\n      camera.position.y = Math.max(minY, Math.min(maxY, camera.position.y));\n      camera.position.z = Math.max(minZ, Math.min(maxZ, camera.position.z));\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Fonction pour gÃ©rer le redimensionnement\n    const onWindowResize = () => {\n      if (cameraRef.current && renderer) {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        // Met Ã  jour le rapport d'aspect de la camÃ©ra et la matrice de projection\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n\n        // Redimensionne le renderer\n        renderer.setSize(width, height);\n        renderer.setPixelRatio(window.devicePixelRatio);\n      }\n    };\n\n    // Ajoute un Ã©couteur d'Ã©vÃ©nement pour le redimensionnement de la fenÃªtre\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup on unmount\n    return () => {\n      var _mountRef$current2;\n      renderer.dispose();\n      (_mountRef$current2 = mountRef.current) === null || _mountRef$current2 === void 0 ? void 0 : _mountRef$current2.removeChild(renderer.domElement);\n      window.removeEventListener('click', onMouseClick);\n      window.removeEventListener('resize', onWindowResize); // Nettoyage de l'Ã©couteur resize\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 12\n  }, this);\n};\n_s(ThreeScene, \"GGMp3eX8uvqaj2YO3O7DFm0wjkk=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","FontLoader","TextGeometry","Reflector","gsap","GLTFLoader","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","cameraRef","raycaster","Raycaster","mouse","Vector2","_mountRef$current","scene","Scene","loader","load","gltf","model","position","set","add","undefined","error","console","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","current","addEventListener","event","preventDefault","renderer","WebGLRenderer","setSize","appendChild","domElement","groundGeometry","PlaneGeometry","groundMirror","color","textureWidth","textureHeight","clipBias","rotation","x","Math","PI","y","createGradientTexture","canvas","document","createElement","width","height","ctx","getContext","Error","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","texture","Texture","needsUpdate","gradientTexture","wrapS","ClampToEdgeWrapping","wrapT","groundOverlayMaterial","MeshBasicMaterial","map","transparent","opacity","groundOverlay","Mesh","ambientLight","AmbientLight","pointLight","PointLight","panelGeometry","panelMaterial","side","DoubleSide","panel","createStyledButton","text","outlineColor","font","buttonGroup","Group","buttonGeometry","BoxGeometry","buttonMaterial","button","outlineGeometry","outlineMaterial","outline","z","textGeometry","size","textMaterial","buttonText","cameraPositions","fontLoader","buttons","buttonConfigs","forEach","btn","index","push","changeCameraAngle","pos","to","duration","onUpdate","_cameraRef$current","lookAt","onMouseClick","clientX","clientY","setFromCamera","intersects","intersectObjects","length","clickedButtonIndex","findIndex","object","parent","controls","enablePan","enableDamping","dampingFactor","maxPolarAngle","minPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","maxDistance","animate","requestAnimationFrame","update","maxX","minX","maxY","minY","maxZ","minZ","max","min","render","onWindowResize","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","_mountRef$current2","dispose","removeChild","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/saba/portfolio/src/ThreeScene.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Font, FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { Reflector } from 'three/examples/jsm/objects/Reflector';\nimport { gsap } from 'gsap';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nconst ThreeScene: React.FC = () => {\n    const mountRef = useRef<HTMLDivElement>(null);\n    const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n    const raycaster = useRef(new THREE.Raycaster());\n    const mouse = useRef(new THREE.Vector2());\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        // Create a GLTFLoader instance\n        const loader = new GLTFLoader();\n\n        // Load the GLB model\n        loader.load(\n            '/models/Gaming Room PSD Pro.glb', // Path to the model file\n            (gltf) => {\n                const model = gltf.scene;\n                model.position.set(0, -0.16, 0); // Adjust position as needed\n                scene.add(model);\n            },\n            undefined,\n            (error) => {\n                console.error('An error occurred while loading the model', error);\n            }\n        );\n\n        scene.background = new THREE.Color(0x111111);\n\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        camera.position.set(-5, 5, 10);\n        cameraRef.current = camera;\n        // Disable right-click context menu\n        window.addEventListener('contextmenu', (event) => event.preventDefault());\n\n\n\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current?.appendChild(renderer.domElement);\n\n        // Ground with fading, glossy reflection\n        const groundGeometry = new THREE.PlaneGeometry(500, 500);\n\n        // Create the Reflector\n        const groundMirror = new Reflector(groundGeometry, {\n            color: 0x888888, // Base gray color for the reflection\n            textureWidth: window.innerWidth * 2,\n            textureHeight: window.innerHeight * 2,\n            clipBias: 0.003,\n        });\n        groundMirror.rotation.x = -Math.PI / 2;\n        groundMirror.position.y = 0.01; // Slightly above ground\n        scene.add(groundMirror);\n\n        // Create a gradient overlay to fade the reflection\n        function createGradientTexture() {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = 256;\n            canvas.height = 512;\n        \n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Failed to get 2D context\");\n            }\n        \n            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n            gradient.addColorStop(0, \"rgba(0, 0, 0, 1)\"); // Black at the top\n            gradient.addColorStop(1, \"rgba(0, 0, 0, 0)\"); // Transparent at the bottom\n        \n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        \n            // Convert the canvas to a texture\n            const texture = new THREE.Texture(canvas);\n            texture.needsUpdate = true;\n            return texture;\n        }\n        \n        \n        const gradientTexture = createGradientTexture();\n        gradientTexture.wrapS = THREE.ClampToEdgeWrapping;\n        gradientTexture.wrapT = THREE.ClampToEdgeWrapping;\n\n        const groundOverlayMaterial = new THREE.MeshBasicMaterial({\n            map: gradientTexture,\n            transparent: true,\n            opacity: 0.5, // Adjust opacity for subtlety\n        });\n        const groundOverlay = new THREE.Mesh(groundGeometry, groundOverlayMaterial);\n        groundOverlay.rotation.x = -Math.PI / 2;\n        groundOverlay.position.y = 0.015; // Slightly above the mirror for blending\n        scene.add(groundOverlay);\n\n\n\n\n        // Lighting\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.2); // Reduced intensity to 0.2\n        scene.add(ambientLight);\n\n        const pointLight = new THREE.PointLight(0xffffff, 0.6); // Reduced intensity to 0.6\n        pointLight.position.set(10, 10, 10);\n        scene.add(pointLight);\n\n\n        // Panel and Buttons\n        const panelGeometry = new THREE.PlaneGeometry(2, 3);\n        const panelMaterial = new THREE.MeshBasicMaterial({ color: 0x333333, side: THREE.DoubleSide });\n        const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n        panel.position.set(-5, 3, 0);\n        scene.add(panel);\n\n        // Function to create a colorful button with outline and text\n        function createStyledButton(text: string, color: number, outlineColor: number, font: Font) {\n            const buttonGroup = new THREE.Group();\n\n            // Button background\n            const buttonGeometry = new THREE.BoxGeometry(1.5, 0.5, 0.1);\n            const buttonMaterial = new THREE.MeshBasicMaterial({ color });\n            const button = new THREE.Mesh(buttonGeometry, buttonMaterial);\n\n            // Outline (dark border)\n            const outlineGeometry = new THREE.BoxGeometry(1.55, 0.55, 0.1);\n            const outlineMaterial = new THREE.MeshBasicMaterial({ color: outlineColor });\n            const outline = new THREE.Mesh(outlineGeometry, outlineMaterial);\n            outline.position.z = -0.01;\n\n            // Text\n            const textGeometry = new TextGeometry(text, {\n                font: font,\n                size: 0.15,\n                height: 0.02,\n            });\n            const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n            const buttonText = new THREE.Mesh(textGeometry, textMaterial);\n            buttonText.position.set(-0.6, -0.1, 0.06);\n\n            buttonGroup.add(outline);\n            buttonGroup.add(button);\n            buttonGroup.add(buttonText);\n\n            return buttonGroup;\n        }\n\n        // Define camera positions for each button\n        const cameraPositions = [\n            { x: 0, y: 0, z: 50},\n            { x: -10, y: 5, z: -10 },\n            { x: 0, y: 5, z: 1 },\n            { x: 0, y: 5, z: -15 },\n        ];\n\n        // Load Font and Add Styled Buttons to Panel\n        const fontLoader = new FontLoader();\n        let buttons: THREE.Group[] = []; // Store button groups for click detection\n\n        fontLoader.load(\n            'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',\n            (font) => {\n                // Define panel button configurations\n                const buttonConfigs = [\n                    { text: \"Projects\", color: 0xff0055, outline: 0x000000 },\n                    { text: \"Articles\", color: 0xffaa00, outline: 0x000000 },\n                    { text: \"About Me\", color: 0x00aaff, outline: 0x000000 },\n                    { text: \"Credits\", color: 0xffcc33, outline: 0x000000 },\n                ];\n\n                // Create and position each button on the panel\n                buttonConfigs.forEach((btn, index) => {\n                    const button = createStyledButton(btn.text, btn.color, btn.outline, font);\n                    button.position.set(0, (index-1.5) * -0.7, 0.05);\n                    panel.add(button);\n                    buttons.push(button); // Add to buttons array for click detection\n                });\n            }\n        );\n\n        // Function to change camera angle smoothly\n        const changeCameraAngle = (index: number) => {\n            if (cameraRef.current) {\n                const pos = cameraPositions[index];\n                gsap.to(cameraRef.current.position, {\n                    x: pos.x,\n                    y: pos.y,\n                    z: pos.z,\n                    duration: 2,\n                    onUpdate: () => {\n                        cameraRef.current?.lookAt(0, 2, 0);\n                    },\n                });\n            }\n        };\n\n        // Detect Mouse Clicks on Buttons\n        const onMouseClick = (event: MouseEvent) => {\n            if (!mountRef.current) return;\n\n            // Convert mouse position to normalized device coordinates\n            mouse.current.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n            raycaster.current.setFromCamera(mouse.current, cameraRef.current!);\n            const intersects = raycaster.current.intersectObjects(buttons, true);\n\n            if (intersects.length > 0) {\n                const clickedButtonIndex = buttons.findIndex((btn) => btn === intersects[0].object.parent);\n                if (clickedButtonIndex !== -1) {\n                    changeCameraAngle(clickedButtonIndex);\n                }\n            }\n        };\n\n        window.addEventListener('click', onMouseClick);\n\n        // Orbit Controls\n        const controls = new OrbitControls(camera, renderer.domElement);\n        // Enable only rotation (orbit) around the target\n        controls.enablePan = false; // Disable panning, so the camera position cannot change\n\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.25;\n        controls.maxPolarAngle = Math.PI / 2.2; // Prevents camera from going below the ground\n        controls.minPolarAngle = 0; // Prevents camera from looking straight up\n        // Optional horizontal rotation limits\n        controls.minAzimuthAngle = -Math.PI / 2; // Left boundary\n        controls.maxAzimuthAngle = Math.PI / 10;  // Right boundary\n        controls.minDistance = 5;\n        controls.maxDistance = 50;\n\n        // Animation loop\n        function animate() {\n            requestAnimationFrame(animate);\n\n            // Update controls\n            controls.update();\n        \n            // Constrain camera position within bounds\n            const maxX = 10, minX = -10;\n            const maxY = 10, minY = 1;\n            const maxZ = 10, minZ = -10;\n        \n            camera.position.x = Math.max(minX, Math.min(maxX, camera.position.x));\n            camera.position.y = Math.max(minY, Math.min(maxY, camera.position.y));\n            camera.position.z = Math.max(minZ, Math.min(maxZ, camera.position.z));\n            renderer.render(scene, camera);\n        }\n\n        animate();\n\n\n        // Fonction pour gÃ©rer le redimensionnement\n        const onWindowResize = () => {\n            if (cameraRef.current && renderer) {\n                const width = window.innerWidth;\n                const height = window.innerHeight;\n                \n                // Met Ã  jour le rapport d'aspect de la camÃ©ra et la matrice de projection\n                cameraRef.current.aspect = width / height;\n                cameraRef.current.updateProjectionMatrix();\n\n                // Redimensionne le renderer\n                renderer.setSize(width, height);\n                renderer.setPixelRatio(window.devicePixelRatio);\n            }\n        };\n\n        // Ajoute un Ã©couteur d'Ã©vÃ©nement pour le redimensionnement de la fenÃªtre\n        window.addEventListener('resize', onWindowResize);\n\n\n\n        // Cleanup on unmount\n        return () => {\n            renderer.dispose();\n            mountRef.current?.removeChild(renderer.domElement);\n            window.removeEventListener('click', onMouseClick);\n            window.removeEventListener('resize', onWindowResize); // Nettoyage de l'Ã©couteur resize\n        };\n    }, []);\n\n    return <div ref={mountRef} />;\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}