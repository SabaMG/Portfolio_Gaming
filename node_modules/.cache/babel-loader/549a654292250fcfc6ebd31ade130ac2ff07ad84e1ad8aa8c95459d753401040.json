{"ast":null,"code":"var _jsxFileName = \"/Users/saba/portfolio/src/ThreeScene.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    var _mountRef$current;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xffffff);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 10;\n    camera.position.y = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.appendChild(renderer.domElement);\n\n    // Main Building\n    const mainBuildingGeometry = new THREE.BoxGeometry(4, 4, 4);\n    const mainBuildingMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8b4513\n    }); // Brown color for walls\n    const mainBuilding = new THREE.Mesh(mainBuildingGeometry, mainBuildingMaterial);\n    mainBuilding.position.y = 2;\n    scene.add(mainBuilding);\n\n    // Roof\n    const roofGeometry = new THREE.ConeGeometry(3.5, 2, 4); // Cone shape for the roof\n    const roofMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8b0000\n    }); // Dark red color for the roof\n    const roof = new THREE.Mesh(roofGeometry, roofMaterial);\n    roof.position.y = 5;\n    roof.rotation.y = Math.PI / 4; // Rotate to align with the house\n    scene.add(roof);\n\n    // Door\n    const doorGeometry = new THREE.BoxGeometry(1, 2, 0.1);\n    const doorMaterial = new THREE.MeshStandardMaterial({\n      color: 0x654321\n    }); // Dark brown color for the door\n    const door = new THREE.Mesh(doorGeometry, doorMaterial);\n    door.position.set(0, 1, 2.05); // Position at the front of the house\n    scene.add(door);\n\n    // Windows\n    const windowGeometry = new THREE.BoxGeometry(0.8, 0.8, 0.1);\n    const windowMaterial = new THREE.MeshStandardMaterial({\n      color: 0xadd8e6\n    }); // Light blue for glass\n    const window1 = new THREE.Mesh(windowGeometry, windowMaterial);\n    const window2 = window1.clone();\n    window1.position.set(-1.5, 2.5, 2.05); // Left window\n    window2.position.set(1.5, 2.5, 2.05); // Right window\n\n    scene.add(window1);\n    scene.add(window2);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    pointLight.position.set(10, 10, 10);\n    scene.add(pointLight);\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n\n    // Animation loop\n    function animate() {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Cleanup on unmount\n    return () => {\n      var _mountRef$current2;\n      renderer.dispose();\n      (_mountRef$current2 = mountRef.current) === null || _mountRef$current2 === void 0 ? void 0 : _mountRef$current2.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 12\n  }, this);\n};\n_s(ThreeScene, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","_mountRef$current","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","y","renderer","WebGLRenderer","setSize","current","appendChild","domElement","mainBuildingGeometry","BoxGeometry","mainBuildingMaterial","MeshStandardMaterial","color","mainBuilding","Mesh","add","roofGeometry","ConeGeometry","roofMaterial","roof","rotation","Math","PI","doorGeometry","doorMaterial","door","set","windowGeometry","windowMaterial","window1","window2","clone","ambientLight","AmbientLight","pointLight","PointLight","controls","enableDamping","dampingFactor","animate","requestAnimationFrame","update","render","_mountRef$current2","dispose","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/saba/portfolio/src/ThreeScene.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst ThreeScene: React.FC = () => {\n    const mountRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(0xffffff);\n\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        camera.position.z = 10;\n        camera.position.y = 5;\n\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current?.appendChild(renderer.domElement);\n\n        // Main Building\n        const mainBuildingGeometry = new THREE.BoxGeometry(4, 4, 4);\n        const mainBuildingMaterial = new THREE.MeshStandardMaterial({ color: 0x8b4513 }); // Brown color for walls\n        const mainBuilding = new THREE.Mesh(mainBuildingGeometry, mainBuildingMaterial);\n        mainBuilding.position.y = 2;\n        scene.add(mainBuilding);\n\n        // Roof\n        const roofGeometry = new THREE.ConeGeometry(3.5, 2, 4); // Cone shape for the roof\n        const roofMaterial = new THREE.MeshStandardMaterial({ color: 0x8b0000 }); // Dark red color for the roof\n        const roof = new THREE.Mesh(roofGeometry, roofMaterial);\n        roof.position.y = 5;\n        roof.rotation.y = Math.PI / 4; // Rotate to align with the house\n        scene.add(roof);\n\n        // Door\n        const doorGeometry = new THREE.BoxGeometry(1, 2, 0.1);\n        const doorMaterial = new THREE.MeshStandardMaterial({ color: 0x654321 }); // Dark brown color for the door\n        const door = new THREE.Mesh(doorGeometry, doorMaterial);\n        door.position.set(0, 1, 2.05); // Position at the front of the house\n        scene.add(door);\n\n        // Windows\n        const windowGeometry = new THREE.BoxGeometry(0.8, 0.8, 0.1);\n        const windowMaterial = new THREE.MeshStandardMaterial({ color: 0xadd8e6 }); // Light blue for glass\n        const window1 = new THREE.Mesh(windowGeometry, windowMaterial);\n        const window2 = window1.clone();\n\n        window1.position.set(-1.5, 2.5, 2.05); // Left window\n        window2.position.set(1.5, 2.5, 2.05); // Right window\n\n        scene.add(window1);\n        scene.add(window2);\n\n        // Lighting\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        scene.add(ambientLight);\n\n        const pointLight = new THREE.PointLight(0xffffff, 1);\n        pointLight.position.set(10, 10, 10);\n        scene.add(pointLight);\n\n        // Controls\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.25;\n\n        // Animation loop\n        function animate() {\n            requestAnimationFrame(animate);\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        animate();\n\n        // Cleanup on unmount\n        return () => {\n            renderer.dispose();\n            mountRef.current?.removeChild(renderer.domElement);\n        };\n    }, []);\n\n    return <div ref={mountRef} />;\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}