{"ast":null,"code":"var _jsxFileName = \"/Users/saba/portfolio/src/ThreeScene.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { gsap } from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  const cameraRef = useRef(null);\n  const raycaster = useRef(new THREE.Raycaster());\n  const mouse = useRef(new THREE.Vector2());\n  const INTERSECTED = useRef(null);\n  useEffect(() => {\n    var _mountRef$current;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xffffff);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(-5, 5, 10);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.appendChild(renderer.domElement);\n\n    // Main Building\n    const mainBuildingGeometry = new THREE.BoxGeometry(4, 4, 4);\n    const mainBuildingMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8b4513\n    });\n    const mainBuilding = new THREE.Mesh(mainBuildingGeometry, mainBuildingMaterial);\n    mainBuilding.position.y = 2;\n    scene.add(mainBuilding);\n\n    // Roof\n    const roofGeometry = new THREE.ConeGeometry(3.5, 2, 4);\n    const roofMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8b0000\n    });\n    const roof = new THREE.Mesh(roofGeometry, roofMaterial);\n    roof.position.y = 5;\n    roof.rotation.y = Math.PI / 4;\n    scene.add(roof);\n\n    // Ground\n    const groundGeometry = new THREE.PlaneGeometry(500, 500);\n    const groundMaterial = new THREE.MeshStandardMaterial({\n      color: 0x228b22\n    });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = 0;\n    ground.receiveShadow = true;\n    scene.add(ground);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    pointLight.position.set(10, 10, 10);\n    scene.add(pointLight);\n\n    // 3D Panel for Camera Control\n    const panelGeometry = new THREE.PlaneGeometry(2, 2);\n    const panelMaterial = new THREE.MeshBasicMaterial({\n      color: 0x333333,\n      side: THREE.DoubleSide\n    });\n    const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n    panel.position.set(-5, 3, 0);\n    scene.add(panel);\n\n    // Buttons on the Panel\n    const buttonGeometry = new THREE.BoxGeometry(0.6, 0.25, 0.1);\n    const buttonMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffffff\n    });\n    const button1 = new THREE.Mesh(buttonGeometry, buttonMaterial);\n    button1.position.set(-0.5, 0.5, 0.1);\n    panel.add(button1);\n    const button2 = new THREE.Mesh(buttonGeometry, buttonMaterial);\n    button2.position.set(0.5, 0.5, 0.1);\n    panel.add(button2);\n\n    // Load Font and Add Text to Buttons\n    const fontLoader = new FontLoader();\n    fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', font => {\n      // Text for Button 1\n      const textGeometry1 = new TextGeometry('Projet', {\n        font: font,\n        size: 0.1,\n        height: 0.02\n      });\n      const textMaterial = new THREE.MeshBasicMaterial({\n        color: 0x000000\n      });\n      const text1 = new THREE.Mesh(textGeometry1, textMaterial);\n      text1.position.set(-0.7, 0.4, 0.12);\n      panel.add(text1);\n\n      // Text for Button 2\n      const textGeometry2 = new TextGeometry('Ecole', {\n        font: font,\n        size: 0.1,\n        height: 0.02\n      });\n      const text2 = new THREE.Mesh(textGeometry2, textMaterial);\n      text2.position.set(0.3, 0.4, 0.12);\n      panel.add(text2);\n    });\n\n    // Array of camera positions for smooth transition\n    const cameraPositions = [{\n      x: 10,\n      y: 5,\n      z: 10\n    }, {\n      x: -10,\n      y: 5,\n      z: -10\n    }];\n\n    // Function to change camera angle\n    const changeCameraAngle = index => {\n      if (cameraRef.current) {\n        const pos = cameraPositions[index];\n        gsap.to(cameraRef.current.position, {\n          x: pos.x,\n          y: pos.y,\n          z: pos.z,\n          duration: 2,\n          onUpdate: () => {\n            var _cameraRef$current;\n            (_cameraRef$current = cameraRef.current) === null || _cameraRef$current === void 0 ? void 0 : _cameraRef$current.lookAt(0, 0, 0);\n          }\n        });\n      }\n    };\n\n    // Detect Mouse Clicks and Hover\n    const onMouseMove = event => {\n      mouse.current.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.current.setFromCamera(mouse.current, cameraRef.current);\n      const intersects = raycaster.current.intersectObjects([button1, button2]);\n      if (intersects.length > 0) {\n        const intersectedObject = intersects[0].object;\n        const material = intersectedObject.material;\n        if (INTERSECTED.current !== intersectedObject) {\n          if (INTERSECTED.current) {\n            const previousMaterial = INTERSECTED.current.material;\n            // Vérifier que le matériau précédent est bien un MeshBasicMaterial\n            if (previousMaterial instanceof THREE.MeshBasicMaterial) {\n              previousMaterial.color.set(0xffffff); // Réinitialiser la couleur\n            }\n          }\n          INTERSECTED.current = intersectedObject;\n\n          // Vérifier que le matériau actuel est bien un MeshBasicMaterial\n          if (material instanceof THREE.MeshBasicMaterial) {\n            material.color.set(0xffcc00); // Appliquer la couleur de survol\n          }\n        }\n      } else {\n        if (INTERSECTED.current) {\n          const previousMaterial = INTERSECTED.current.material;\n          if (previousMaterial instanceof THREE.MeshBasicMaterial) {\n            previousMaterial.color.set(0xffffff); // Réinitialiser la couleur par défaut\n          }\n        }\n        INTERSECTED.current = null;\n      }\n    };\n    const onMouseClick = event => {\n      const intersects = raycaster.current.intersectObjects([button1, button2]);\n      if (intersects.length > 0) {\n        if (intersects[0].object === button1) changeCameraAngle(0);\n        if (intersects[0].object === button2) changeCameraAngle(1);\n      }\n    };\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('click', onMouseClick);\n\n    // Orbit Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.maxPolarAngle = Math.PI / 2.2;\n    controls.minDistance = 5;\n    controls.maxDistance = 50;\n\n    // Animation loop\n    function animate() {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Cleanup\n    return () => {\n      var _mountRef$current2;\n      renderer.dispose();\n      (_mountRef$current2 = mountRef.current) === null || _mountRef$current2 === void 0 ? void 0 : _mountRef$current2.removeChild(renderer.domElement);\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('click', onMouseClick);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 12\n  }, this);\n};\n_s(ThreeScene, \"H7aXv/B/kKgvZCg6E4N2Iv4/CGg=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","FontLoader","TextGeometry","gsap","jsxDEV","_jsxDEV","ThreeScene","_s","mountRef","cameraRef","raycaster","Raycaster","mouse","Vector2","INTERSECTED","_mountRef$current","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","current","renderer","WebGLRenderer","setSize","appendChild","domElement","mainBuildingGeometry","BoxGeometry","mainBuildingMaterial","MeshStandardMaterial","color","mainBuilding","Mesh","y","add","roofGeometry","ConeGeometry","roofMaterial","roof","rotation","Math","PI","groundGeometry","PlaneGeometry","groundMaterial","ground","x","receiveShadow","ambientLight","AmbientLight","pointLight","PointLight","panelGeometry","panelMaterial","MeshBasicMaterial","side","DoubleSide","panel","buttonGeometry","buttonMaterial","button1","button2","fontLoader","load","font","textGeometry1","size","height","textMaterial","text1","textGeometry2","text2","cameraPositions","z","changeCameraAngle","index","pos","to","duration","onUpdate","_cameraRef$current","lookAt","onMouseMove","event","clientX","clientY","setFromCamera","intersects","intersectObjects","length","intersectedObject","object","material","previousMaterial","onMouseClick","addEventListener","controls","enableDamping","dampingFactor","maxPolarAngle","minDistance","maxDistance","animate","requestAnimationFrame","update","render","_mountRef$current2","dispose","removeChild","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/saba/portfolio/src/ThreeScene.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { gsap } from 'gsap';\n\nconst ThreeScene: React.FC = () => {\n    const mountRef = useRef<HTMLDivElement>(null);\n    const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n    const raycaster = useRef(new THREE.Raycaster());\n    const mouse = useRef(new THREE.Vector2());\n    const INTERSECTED = useRef<THREE.Object3D | null>(null);\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(0xffffff);\n\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        camera.position.set(-5, 5, 10);\n        cameraRef.current = camera;\n\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mountRef.current?.appendChild(renderer.domElement);\n\n        // Main Building\n        const mainBuildingGeometry = new THREE.BoxGeometry(4, 4, 4);\n        const mainBuildingMaterial = new THREE.MeshStandardMaterial({ color: 0x8b4513 });\n        const mainBuilding = new THREE.Mesh(mainBuildingGeometry, mainBuildingMaterial);\n        mainBuilding.position.y = 2;\n        scene.add(mainBuilding);\n\n        // Roof\n        const roofGeometry = new THREE.ConeGeometry(3.5, 2, 4);\n        const roofMaterial = new THREE.MeshStandardMaterial({ color: 0x8b0000 });\n        const roof = new THREE.Mesh(roofGeometry, roofMaterial);\n        roof.position.y = 5;\n        roof.rotation.y = Math.PI / 4;\n        scene.add(roof);\n\n        // Ground\n        const groundGeometry = new THREE.PlaneGeometry(500, 500);\n        const groundMaterial = new THREE.MeshStandardMaterial({ color: 0x228b22 });\n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -Math.PI / 2;\n        ground.position.y = 0;\n        ground.receiveShadow = true;\n        scene.add(ground);\n\n        // Lighting\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        scene.add(ambientLight);\n\n        const pointLight = new THREE.PointLight(0xffffff, 1);\n        pointLight.position.set(10, 10, 10);\n        scene.add(pointLight);\n\n        // 3D Panel for Camera Control\n        const panelGeometry = new THREE.PlaneGeometry(2, 2);\n        const panelMaterial = new THREE.MeshBasicMaterial({ color: 0x333333, side: THREE.DoubleSide });\n        const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n        panel.position.set(-5, 3, 0);\n        scene.add(panel);\n\n        // Buttons on the Panel\n        const buttonGeometry = new THREE.BoxGeometry(0.6, 0.25, 0.1);\n        const buttonMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        const button1 = new THREE.Mesh(buttonGeometry, buttonMaterial);\n        button1.position.set(-0.5, 0.5, 0.1);\n        panel.add(button1);\n\n        const button2 = new THREE.Mesh(buttonGeometry, buttonMaterial);\n        button2.position.set(0.5, 0.5, 0.1);\n        panel.add(button2);\n\n        // Load Font and Add Text to Buttons\n        const fontLoader = new FontLoader();\n        fontLoader.load(\n            'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',\n            (font) => {\n                // Text for Button 1\n                const textGeometry1 = new TextGeometry('Projet', {\n                    font: font,\n                    size: 0.1,\n                    height: 0.02,\n                });\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\n                const text1 = new THREE.Mesh(textGeometry1, textMaterial);\n                text1.position.set(-0.7, 0.4, 0.12);\n                panel.add(text1);\n\n                // Text for Button 2\n                const textGeometry2 = new TextGeometry('Ecole', {\n                    font: font,\n                    size: 0.1,\n                    height: 0.02,\n                });\n                const text2 = new THREE.Mesh(textGeometry2, textMaterial);\n                text2.position.set(0.3, 0.4, 0.12);\n                panel.add(text2);\n            }\n        );\n\n        // Array of camera positions for smooth transition\n        const cameraPositions = [\n            { x: 10, y: 5, z: 10 },\n            { x: -10, y: 5, z: -10 },\n        ];\n\n        // Function to change camera angle\n        const changeCameraAngle = (index: number) => {\n            if (cameraRef.current) {\n                const pos = cameraPositions[index];\n                gsap.to(cameraRef.current.position, {\n                    x: pos.x,\n                    y: pos.y,\n                    z: pos.z,\n                    duration: 2,\n                    onUpdate: () => {\n                        cameraRef.current?.lookAt(0, 0, 0);\n                    }\n                });\n            }\n        };\n\n        // Detect Mouse Clicks and Hover\n        const onMouseMove = (event: MouseEvent) => {\n            mouse.current.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        \n            raycaster.current.setFromCamera(mouse.current, cameraRef.current!);\n            const intersects = raycaster.current.intersectObjects([button1, button2]);\n        \n            if (intersects.length > 0) {\n                const intersectedObject = intersects[0].object as THREE.Mesh;\n                const material = intersectedObject.material as THREE.Material | THREE.Material[];\n        \n                if (INTERSECTED.current !== intersectedObject) {\n                    if (INTERSECTED.current) {\n                        const previousMaterial = INTERSECTED.current.material as THREE.Material | THREE.Material[];\n                        // Vérifier que le matériau précédent est bien un MeshBasicMaterial\n                        if (previousMaterial instanceof THREE.MeshBasicMaterial) {\n                            previousMaterial.color.set(0xffffff); // Réinitialiser la couleur\n                        }\n                    }\n        \n                    INTERSECTED.current = intersectedObject;\n                    \n                    // Vérifier que le matériau actuel est bien un MeshBasicMaterial\n                    if (material instanceof THREE.MeshBasicMaterial) {\n                        material.color.set(0xffcc00); // Appliquer la couleur de survol\n                    }\n                }\n            } else {\n                if (INTERSECTED.current) {\n                    const previousMaterial = INTERSECTED.current.material as THREE.Material | THREE.Material[];\n                    if (previousMaterial instanceof THREE.MeshBasicMaterial) {\n                        previousMaterial.color.set(0xffffff); // Réinitialiser la couleur par défaut\n                    }\n                }\n                INTERSECTED.current = null;\n            }\n        };\n        \n        \n        \n\n        const onMouseClick = (event: MouseEvent) => {\n            const intersects = raycaster.current.intersectObjects([button1, button2]);\n            if (intersects.length > 0) {\n                if (intersects[0].object === button1) changeCameraAngle(0);\n                if (intersects[0].object === button2) changeCameraAngle(1);\n            }\n        };\n\n        window.addEventListener('mousemove', onMouseMove);\n        window.addEventListener('click', onMouseClick);\n\n        // Orbit Controls\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.25;\n        controls.maxPolarAngle = Math.PI / 2.2;\n        controls.minDistance = 5;\n        controls.maxDistance = 50;\n\n        // Animation loop\n        function animate() {\n            requestAnimationFrame(animate);\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        animate();\n\n        // Cleanup\n        return () => {\n            renderer.dispose();\n            mountRef.current?.removeChild(renderer.domElement);\n            window.removeEventListener('mousemove', onMouseMove);\n            window.removeEventListener('click', onMouseClick);\n        };\n    }, []);\n\n    return <div ref={mountRef} />;\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}